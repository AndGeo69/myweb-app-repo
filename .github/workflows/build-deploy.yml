name: Docker Build Deploy
on:
  push:
    branches: [master]
  workflow_dispatch:
env:
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  REGISTRY: ghcr.io
  REPO_NAME: ${{ github.repository }}
  APP_NAME: myweb-app
  PRODUCT_REPO_NAME: ${{secrets.PRODUCT_REPO_NAME}}
jobs:
  create-user-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log in to container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: downcase REPO
        run: |
          echo "LOWERCASE_REPO=${REPO_NAME,,}" >>${GITHUB_ENV}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-kubernetes:
    needs: [create-user-image]
    runs-on: ubuntu-latest
    env:
      SECTION_K8S_API_URL: "${{secrets.SECTION_K8S_URL}}"
      SECTION_API_TOKEN: "${{secrets.SECTION_API_TOKEN}}"
    steps:
      - uses: actions/checkout@v2
      # - name: kubectl deployment
      #   uses: medyagh/setup-minikube@master

      - name: Trying the clusters
        run: kubectl get pods -A

      - name: Configuring kubect to talk to Section 
        run: |
            kubectl config set-cluster section-cluster --server=$SECTION_K8S_API_URL
            kubectl config set-credentials section-user --token=$SECTION_API_TOKEN
            kubectl config set-context section --cluster=section-cluster --user=section-user
            kubectl config use-context section

      - name: Deploying to Section K8S 
        run: |
            kubectl apply -f k8s-deployment.yaml
            kubectl rollout restart deployment $APP_NAME
